// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/CuiYao631/mini_program-server-go/ent/resources"
)

// Resources is the model entity for the Resources schema.
type Resources struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedUserName holds the value of the "created_user_name" field.
	CreatedUserName string `json:"created_user_name,omitempty"`
	// UpdatedUserName holds the value of the "updated_user_name" field.
	UpdatedUserName string `json:"updated_user_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resources) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resources.FieldID, resources.FieldTitle, resources.FieldIcon, resources.FieldTag, resources.FieldDesc, resources.FieldURL, resources.FieldCreatedUserName, resources.FieldUpdatedUserName:
			values[i] = new(sql.NullString)
		case resources.FieldCreatedAt, resources.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resources", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resources fields.
func (r *Resources) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resources.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case resources.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				r.Title = value.String
			}
		case resources.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				r.Icon = value.String
			}
		case resources.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				r.Tag = value.String
			}
		case resources.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				r.Desc = value.String
			}
		case resources.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case resources.FieldCreatedUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_user_name", values[i])
			} else if value.Valid {
				r.CreatedUserName = value.String
			}
		case resources.FieldUpdatedUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_user_name", values[i])
			} else if value.Valid {
				r.UpdatedUserName = value.String
			}
		case resources.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case resources.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Resources.
// Note that you need to call Resources.Unwrap() before calling this method if this Resources
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resources) Update() *ResourcesUpdateOne {
	return (&ResourcesClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Resources entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resources) Unwrap() *Resources {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resources is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resources) String() string {
	var builder strings.Builder
	builder.WriteString("Resources(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", title=")
	builder.WriteString(r.Title)
	builder.WriteString(", icon=")
	builder.WriteString(r.Icon)
	builder.WriteString(", tag=")
	builder.WriteString(r.Tag)
	builder.WriteString(", desc=")
	builder.WriteString(r.Desc)
	builder.WriteString(", url=")
	builder.WriteString(r.URL)
	builder.WriteString(", created_user_name=")
	builder.WriteString(r.CreatedUserName)
	builder.WriteString(", updated_user_name=")
	builder.WriteString(r.UpdatedUserName)
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResourcesSlice is a parsable slice of Resources.
type ResourcesSlice []*Resources

func (r ResourcesSlice) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
