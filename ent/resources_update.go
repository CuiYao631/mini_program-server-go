// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/CuiYao631/mini_program-server-go/ent/predicate"
	"github.com/CuiYao631/mini_program-server-go/ent/resources"
	"github.com/CuiYao631/mini_program-server-go/ent/tag"
)

// ResourcesUpdate is the builder for updating Resources entities.
type ResourcesUpdate struct {
	config
	hooks    []Hook
	mutation *ResourcesMutation
}

// Where appends a list predicates to the ResourcesUpdate builder.
func (ru *ResourcesUpdate) Where(ps ...predicate.Resources) *ResourcesUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ResourcesUpdate) SetName(s string) *ResourcesUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetIcon sets the "icon" field.
func (ru *ResourcesUpdate) SetIcon(s string) *ResourcesUpdate {
	ru.mutation.SetIcon(s)
	return ru
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ru *ResourcesUpdate) SetNillableIcon(s *string) *ResourcesUpdate {
	if s != nil {
		ru.SetIcon(*s)
	}
	return ru
}

// ClearIcon clears the value of the "icon" field.
func (ru *ResourcesUpdate) ClearIcon() *ResourcesUpdate {
	ru.mutation.ClearIcon()
	return ru
}

// SetDesc sets the "desc" field.
func (ru *ResourcesUpdate) SetDesc(s string) *ResourcesUpdate {
	ru.mutation.SetDesc(s)
	return ru
}

// SetURL sets the "url" field.
func (ru *ResourcesUpdate) SetURL(s string) *ResourcesUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ResourcesUpdate) SetCreatedAt(t time.Time) *ResourcesUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ResourcesUpdate) SetNillableCreatedAt(t *time.Time) *ResourcesUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResourcesUpdate) SetUpdatedAt(t time.Time) *ResourcesUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (ru *ResourcesUpdate) AddTagIDs(ids ...string) *ResourcesUpdate {
	ru.mutation.AddTagIDs(ids...)
	return ru
}

// AddTag adds the "tag" edges to the Tag entity.
func (ru *ResourcesUpdate) AddTag(t ...*Tag) *ResourcesUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTagIDs(ids...)
}

// Mutation returns the ResourcesMutation object of the builder.
func (ru *ResourcesUpdate) Mutation() *ResourcesMutation {
	return ru.mutation
}

// ClearTag clears all "tag" edges to the Tag entity.
func (ru *ResourcesUpdate) ClearTag() *ResourcesUpdate {
	ru.mutation.ClearTag()
	return ru
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (ru *ResourcesUpdate) RemoveTagIDs(ids ...string) *ResourcesUpdate {
	ru.mutation.RemoveTagIDs(ids...)
	return ru
}

// RemoveTag removes "tag" edges to Tag entities.
func (ru *ResourcesUpdate) RemoveTag(t ...*Tag) *ResourcesUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourcesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourcesUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourcesUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourcesUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourcesUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := resources.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *ResourcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resources.Table,
			Columns: resources.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: resources.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldName,
		})
	}
	if value, ok := ru.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldIcon,
		})
	}
	if ru.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resources.FieldIcon,
		})
	}
	if value, ok := ru.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldDesc,
		})
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldURL,
		})
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resources.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resources.FieldUpdatedAt,
		})
	}
	if ru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTagIDs(); len(nodes) > 0 && !ru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResourcesUpdateOne is the builder for updating a single Resources entity.
type ResourcesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourcesMutation
}

// SetName sets the "name" field.
func (ruo *ResourcesUpdateOne) SetName(s string) *ResourcesUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetIcon sets the "icon" field.
func (ruo *ResourcesUpdateOne) SetIcon(s string) *ResourcesUpdateOne {
	ruo.mutation.SetIcon(s)
	return ruo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ruo *ResourcesUpdateOne) SetNillableIcon(s *string) *ResourcesUpdateOne {
	if s != nil {
		ruo.SetIcon(*s)
	}
	return ruo
}

// ClearIcon clears the value of the "icon" field.
func (ruo *ResourcesUpdateOne) ClearIcon() *ResourcesUpdateOne {
	ruo.mutation.ClearIcon()
	return ruo
}

// SetDesc sets the "desc" field.
func (ruo *ResourcesUpdateOne) SetDesc(s string) *ResourcesUpdateOne {
	ruo.mutation.SetDesc(s)
	return ruo
}

// SetURL sets the "url" field.
func (ruo *ResourcesUpdateOne) SetURL(s string) *ResourcesUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ResourcesUpdateOne) SetCreatedAt(t time.Time) *ResourcesUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ResourcesUpdateOne) SetNillableCreatedAt(t *time.Time) *ResourcesUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResourcesUpdateOne) SetUpdatedAt(t time.Time) *ResourcesUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (ruo *ResourcesUpdateOne) AddTagIDs(ids ...string) *ResourcesUpdateOne {
	ruo.mutation.AddTagIDs(ids...)
	return ruo
}

// AddTag adds the "tag" edges to the Tag entity.
func (ruo *ResourcesUpdateOne) AddTag(t ...*Tag) *ResourcesUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTagIDs(ids...)
}

// Mutation returns the ResourcesMutation object of the builder.
func (ruo *ResourcesUpdateOne) Mutation() *ResourcesMutation {
	return ruo.mutation
}

// ClearTag clears all "tag" edges to the Tag entity.
func (ruo *ResourcesUpdateOne) ClearTag() *ResourcesUpdateOne {
	ruo.mutation.ClearTag()
	return ruo
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (ruo *ResourcesUpdateOne) RemoveTagIDs(ids ...string) *ResourcesUpdateOne {
	ruo.mutation.RemoveTagIDs(ids...)
	return ruo
}

// RemoveTag removes "tag" edges to Tag entities.
func (ruo *ResourcesUpdateOne) RemoveTag(t ...*Tag) *ResourcesUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourcesUpdateOne) Select(field string, fields ...string) *ResourcesUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resources entity.
func (ruo *ResourcesUpdateOne) Save(ctx context.Context) (*Resources, error) {
	var (
		err  error
		node *Resources
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourcesUpdateOne) SaveX(ctx context.Context) *Resources {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourcesUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourcesUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourcesUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := resources.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *ResourcesUpdateOne) sqlSave(ctx context.Context) (_node *Resources, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resources.Table,
			Columns: resources.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: resources.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Resources.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resources.FieldID)
		for _, f := range fields {
			if !resources.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resources.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldName,
		})
	}
	if value, ok := ruo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldIcon,
		})
	}
	if ruo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resources.FieldIcon,
		})
	}
	if value, ok := ruo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldDesc,
		})
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resources.FieldURL,
		})
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resources.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resources.FieldUpdatedAt,
		})
	}
	if ruo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTagIDs(); len(nodes) > 0 && !ruo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resources.TagTable,
			Columns: resources.TagPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resources{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
