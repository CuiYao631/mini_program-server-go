// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPassword,
	FieldUserType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// UserType defines the type for the "user_type" enum field.
type UserType string

// UserType values.
const (
	UserTypePublisher UserType = "publisher"
	UserTypeWechat    UserType = "wechat"
	UserTypeLogin     UserType = "login"
	UserTypeTouristt  UserType = "touristt"
)

func (ut UserType) String() string {
	return string(ut)
}

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut UserType) error {
	switch ut {
	case UserTypePublisher, UserTypeWechat, UserTypeLogin, UserTypeTouristt:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}
